// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    accounts      Account[]
    sessions      Session[]
    friends       Friendship[]  @relation("UserFriends")
    friendOf      Friendship[]  @relation("UserFriendOf")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id          String      @id @default(uuid())
    points      Int
    description String
    repeatCycle RepeatCycle
    status      Status
    deadline    DateTime
    assignedBy  String
    assignedTo  String
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    deletedAt   DateTime?

    @@index([status])
}

model Friendship {
    id        String   @id @default(uuid())
    userId    String
    friendId  String
    user      User     @relation("UserFriends", fields: [userId], references: [id])
    friend    User     @relation("UserFriendOf", fields: [friendId], references: [id])
    createdAt DateTime @default(now())

    @@unique([userId, friendId])
}

enum RepeatCycle {
    NEVER
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
    CUSTOM
}

enum Status {
    PENDING
    STARTED
    CANCELED
    DONE
    FAILED
}
